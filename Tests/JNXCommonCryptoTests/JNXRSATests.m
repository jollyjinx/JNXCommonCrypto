//
//  JNXRSATests.m
//  JNXCommonCrypto
//
//  Created by Patrick Stein on 3/18/13.
//  Copyright (c) 2013 Patrick Stein. All rights reserved.
//

#import "JNXRSATests.h"
#import "JNXCommonCrypto.h"

@implementation JNXRSATests

- (void)test1
{
	NSArray		*rsaKeyPair 			= [NSData newPrivatePublicKeyPairWithLength:2048];
		
	const char	*quickbrowntxt	 		= "The quick brown fox jumps over the lazy dog.";
	NSData 		*quickbrownTXTData		= [NSData dataWithBytes:quickbrowntxt length:strlen(quickbrowntxt)];

	NSData		*encodedData			= [quickbrownTXTData encryptWithPublicKey:[rsaKeyPair objectAtIndex:1]];
	NSData		*decodedData			= [encodedData decryptWithPrivateKey:[rsaKeyPair objectAtIndex:0]];

	if(![quickbrownTXTData isEqualToData:decodedData]) 		XCTFail(@"Decoded RSA not matching %@\n%@",rsaKeyPair,encodedData);
}

- (void)test2
{
	const char	*quickbrowntxt	 		= "The quick brown fox jumps over the lazy dog.";
	NSData 		*quickbrownTXTData		= [NSData dataWithBytes:quickbrowntxt length:strlen(quickbrowntxt)];

	NSString *privatePublicKeyPairString = @"( <2d2d2d2d 2d424547 494e2052 53412050 52495641 5445204b 45592d2d 2d2d2d0a 4d494943 58414942 41414b42 67514336 734b5835 79615a53 55476d47 3861306c 48636b33 6b756477 4a573563 48424651 6b736f43 71644767 6b38426a 58684262 0a6c4d65 774d3039 6b417853 49783755 58427a36 4a336f54 50322f35 72343745 78466e7a 69724931 69683248 6638682f 50794c56 52343535 4b70644d 4577386a 730a7135 57435639 49316758 6c4d4535 6a4d4f61 794f676f 38446b38 426e5a51 54323658 64415371 515a4758 6670796d 79464a55 33754f2b 78512b77 49444151 41420a41 6f474241 4a355970 4837496c 63547470 59517179 71525872 6b727631 46506675 3870756d 42555358 44754546 4753787a 5a573675 2f38686f 336f4647 3071460a 2f6b3342 7267795a 50576374 454e4e4a 456e5171 54536d49 6e47556d 77594c4a 5953614e 59315349 726e5448 6e4d4262 72655a4b 33655963 59637244 37497439 0a767757 6174472b 724b7231 705a394b 4b634e5a 63507050 56354846 71515a76 39465070 2f76502f 32705269 2b684f4c 78416b45 41375643 36557049 35326348 4c0a4555 716e5670 6a7a5759 42617464 4573305a 42306769 6f625848 6e497041 6963635a 4d737677 4c526962 35574e70 396c706d 5648504b 50666256 564b7076 39720a72 6b676c58 70767567 774a4241 4d6c6a68 31653737 7657516d 59327a65 494e516d 6a784d72 38566274 74552b6b 4d575863 36504a62 524c4255 654c7253 4b6e750a 62634b34 4c646c30 68564672 57537575 75695171 62793849 754d4459 786a6f32 43696b43 51436e70 46643637 51456736 7431676f 62514559 4a664871 6678715a 0a424764 474d6131 444c6d33 59664279 73414b54 324c764c 55317069 53367272 657a3537 68534146 6e6c322f 426e6c74 3778464b 56487a52 6b4b5730 4351416b 450a4561 30563173 37626d47 52466f71 474f5844 6c53335a 4f695658 3861652f 53386f51 71324739 48354961 64644454 572b584e 2b597930 53752b4d 44365931 57580a54 76494c6a 45713477 7a797539 38446e5a 6e454351 42353847 6a41785a 56754e62 68355441 6d465144 30354130 51556a42 6f676955 72325061 7148324e 2f4f7a0a 6f4f5544 437a7132 4e2b6c42 7474774b 316d5355 34413645 4f536356 57744374 2b763736 4246684a 756d773d 0a2d2d2d 2d2d454e 44205253 41205052 49564154 45204b45 592d2d2d 2d2d0a>, <2d2d2d2d 2d424547 494e2052 53412050 55424c49 43204b45 592d2d2d 2d2d0a4d 49474a41 6f474241 4c717770 666e4a70 6c4a5161 59627872 53556479 54655335 33416c62 6c776345 56435379 674b7030 61435477 474e6545 46755578 37417a0a 54325144 46496a48 74526348 506f6e65 684d2f62 2f6d766a 73544557 664f4b73 6a574b48 59642f79 48382f49 7456486a 6e6b716c 30775444 794f7972 6c594a58 0a306a57 42655577 546d4d77 35724936 436a774f 54774764 6c425062 70643042 4b70426b 5a642b6e 4b624955 6c546534 37374644 3741674d 42414145 3d0a2d2d 2d2d2d45 4e442052 53412050 55424c49 43204b45 592d2d2d 2d2d0a> )";


	NSError 	*error;
	NSArray		*rsaKeyPair				= [NSPropertyListSerialization propertyListWithData:[privatePublicKeyPairString dataUsingEncoding:NSUTF8StringEncoding] options:NSPropertyListImmutable format:NULL error:&error];

	if( !rsaKeyPair) XCTFail(@"Could not generate keyPair from string");

	NSLog(@"\n%s\n",(char *)[[rsaKeyPair objectAtIndex:0] bytes]);
	NSLog(@"\n%s\n",(char *)[[rsaKeyPair objectAtIndex:1] bytes]);
	NSData		*encodedData			= [quickbrownTXTData encryptWithPublicKey:[rsaKeyPair objectAtIndex:1]];
	NSData		*decodedData			= [encodedData decryptWithPrivateKey:[rsaKeyPair objectAtIndex:0]];

	if(![quickbrownTXTData isEqualToData:decodedData]) 		XCTFail(@"Decoded RSA not matching %@\n%@",rsaKeyPair,encodedData);


	NSData		*encodedData2			= [@"51ad05f0d8861b4feb1fd2d88a0fc69956bbb952f47a866ee88bacfec0f378198bf0833fcd12fa3d0f8a9c21fd5db985205e522da57367080230ecf5426ab90287a80e1ae78cefde6b5fd17a9350985a76adf908d7032eb60461a179981f0d81a3eb4334fd9635802906ee2b3bcce3d24294226f5fe72c3ac42ed2eb37037b97" hexstringData];
	NSData		*decodedData2			= [encodedData2 decryptWithPrivateKey:[rsaKeyPair objectAtIndex:0]];

	if(![quickbrownTXTData isEqualToData:decodedData2]) 		XCTFail(@"Decoded RSA not matching %@",decodedData2);
}


- (void)test3
{
	const char	*quickbrowntxt	 		= "The quick brown fox jumps over the lazy dog.";
	NSData 		*quickbrownTXTData		= [NSData dataWithBytes:quickbrowntxt length:strlen(quickbrowntxt)];

	NSString *privatePublicKeyPairString = @"( <2d2d2d2d 2d424547 494e2052 53412050 52495641 5445204b 45592d2d 2d2d2d0a 4d494945 70414942 41414b43 41514541 31537334 56665a52 76434d36 444f6f37 7a614f35 6d4e3941 5079372f 70556270 784d4e4e 47706730 534a7833 61787658 0a526d39 30474e71 31747052 69565249 2f4e6c35 70456445 59326633 344c7856 332b6b2b 4c447a56 73622b32 73794b43 70784d49 7a4d2b39 48486159 596e4439 6f0a6f50 56375549 72444c6e 73565154 2b796844 41474e56 39753345 5159564a 51484a6d 6a723771 4e707949 666d342b 30463471 3237647a 47415752 30752b41 39610a56 6d2b4e63 66694e7a 4f453757 36574a52 506b7137 38677233 566f2b37 55647552 78346548 7a625033 6e386a38 39624e38 626c4d46 38553558 5155374b 52314a0a 5531706c 6a787747 4f726531 5a78426d 6e376e46 73393258 4b5a7261 59594c38 4e675531 4e704653 41426f78 2b6f6766 5373386b 75306e31 50624671 56736135 0a4f7068 33565268 434e4e7a 4c4d6667 76737036 636d446e 76504e49 41516443 374e766c 334a7749 44415141 42416f49 4241474d 56337537 654f796e 6e656646 4d0a3435 56337543 71654132 41624f59 75617863 6a484f30 7a55574f 457a6b62 4c41307a 55545533 5447484e 634d6242 5339455a 4c314759 50466e50 61665063 43740a43 774c582f 48794b53 61685259 78497931 42623461 684b4738 35694e66 7a304a6f 466e4a49 5a50546e 46773772 4371544d 43695070 694d6a42 41587778 52707a0a 5945747a 55382b75 4e397156 69546144 45307846 6b7a455a 576c3651 2f2b7a75 3068494c 6761326f 346f3452 7a556c39 4b4a4b64 4b683563 34455364 74773775 0a6c714d 77574336 6367515a 5a633265 42426f71 77536232 56383649 63417747 5051724e 446f6449 75334d30 4345662b 66717859 44654c39 6e713444 534c7252 650a6f67 48682b46 36753950 62674154 526e4451 6a524474 77316d72 754f5563 584b3942 77397637 534b624e 58375648 43664542 63744572 5857707a 33386a61 304d0a6a 5a674464 4e454367 59454137 75745648 45375a7a 61454c51 46302b52 3777737a 654b496e 4c736776 4a524e4b 6d685138 4d717678 566e546e 74433450 36665a0a 596d5668 5531574b 56536155 78756743 48686c53 4158762f 53775574 6e584530 39315767 71544d34 436c644a 34775743 76466571 67307150 31463131 636f474c 0a4b516b 4a4a446d 54453633 414b7a2f 46596453 36374438 4e564538 434a3351 7a764c63 6872726e 6e636648 62337938 6539422b 61714b6b 43675945 41354769 620a5371 7435367a 506b5554 4f483352 32557a4c 4b723451 634b4256 68503777 38576830 6c637678 58775944 4d505579 5a4c786e 59504166 7144424a 33584d69 34630a6c 6a346245 6b7a6f48 634a3657 466f4474 7a353678 614b614c 6b53694d 79574976 79454138 3142434b 776d5355 57365645 476b414e 336a2b38 34437764 2b77330a 576a596b 6239536e 4a433654 35785239 4773304f 65515241 304e3635 624a5643 68447850 38303843 67594261 6c353030 474b6e35 6b494546 724e5636 75643137 0a533952 6c4b5964 6d4f6731 77635247 50334372 39392b75 49497268 6157726a 51324951 6f357879 47345251 30763742 64335666 382f426c 33527356 66463566 760a324f 594d676b 46546d6e 6d487659 55764355 61386462 39483152 41396c4f 56426341 3270554c 4e32474d 48764a45 55687256 6f62546d 5574664b 2f696165 74630a4f 55787152 6b392b49 796b7433 56347454 76614430 514b4267 51433738 39783936 48644e39 5969577a 556d7179 5a484e6b 2b56654b 66573043 6b54556d 6c7a570a 664b6347 55783558 65777a4d 526f4971 554c4875 31643845 61494a52 74364973 652f5334 37584a41 4d75324d 554a346f 4a78444f 47777932 73434773 3575454e 0a4c6a4a 6a42684d 3836515a 7658676a 70315132 706d445a 72312b54 652b6846 65655a6b 6f4d5278 4d364d73 715a7a43 2f596966 62713456 4f6d3069 494d7062 6d0a7939 36616677 4b426751 44437556 6d45386f 48543674 4a31306d 2f716956 684e7874 624a7545 31345754 61555475 6c744758 33576674 3266484d 4d63572b 454e0a35 73366e2b 4d437857 69447147 35464574 615a6d58 72684e4b 48313655 66433663 572f4674 63577144 63546f77 43697465 45376866 466a4842 51513376 4e69540a 4774706d 70464e50 72524f54 36554875 57315136 7955354c 69636d73 6d723968 582f4630 79743557 446c7873 624b694c 4a313539 74413d3d 0a2d2d2d 2d2d454e 44205253 41205052 49564154 45204b45 592d2d2d 2d2d0a>, <2d2d2d2d 2d424547 494e2052 53412050 55424c49 43204b45 592d2d2d 2d2d0a4d 49494243 674b4341 51454131 53733456 665a5276 434d3644 4f6f377a 614f356d 4e394150 79372f70 55627078 4d4e4e47 70673053 4a783361 78765852 6d39300a 474e7131 74705269 5652492f 4e6c3570 45644559 32663334 4c785633 2b6b2b4c 447a5673 622b3273 794b4370 784d497a 4d2b3948 48615959 6e44396f 6f505637 0a554972 444c6e73 5651542b 79684441 474e5639 75334551 59564a51 484a6d6a 7237714e 70794966 6d342b30 46347132 37647a47 41575230 752b4139 61566d2b 4e0a6366 694e7a4f 45375736 574a5250 6b713738 67723356 6f2b3755 64755278 3465487a 6250336e 386a3839 624e3862 6c4d4638 55355851 55374b52 314a5531 706c0a6a 7877474f 7265315a 78426d6e 376e4673 3932584b 5a726159 594c384e 6755314e 70465341 426f782b 6f676653 73386b75 306e3150 62467156 7361354f 7068330a 56526843 4e4e7a4c 4d666776 73703663 6d446e76 504e4941 51644337 4e766c33 4a774944 41514142 0a2d2d2d 2d2d454e 44205253 41205055 424c4943 204b4559 2d2d2d2d 2d0a> )";

	NSError 	*error;
	NSArray		*rsaKeyPair				= [NSPropertyListSerialization propertyListWithData:[privatePublicKeyPairString dataUsingEncoding:NSUTF8StringEncoding] options:NSPropertyListImmutable format:NULL error:&error];
	NSLog(@"\n%@\n%@",[NSString stringWithFormat:@"-----BEGIN PRIVATE KEY-----\n%@\n-----END PRIVATE KEY-----\n",[[rsaKeyPair objectAtIndex:0] base64EncodedString]]
					,[NSString stringWithFormat:@"-----BEGIN PUBLIC KEY-----\n%@\n-----END PUBLIC KEY-----\n",[[rsaKeyPair objectAtIndex:1] base64EncodedString]]);

	if( !rsaKeyPair) XCTFail(@"Could not generate keyPair from string");

	NSData		*encodedData			= [quickbrownTXTData encryptWithPublicKey:[rsaKeyPair objectAtIndex:1]];
	NSData		*decodedData			= [encodedData decryptWithPrivateKey:[rsaKeyPair objectAtIndex:0]];

	if(![quickbrownTXTData isEqualToData:decodedData]) 		XCTFail(@"Decoded RSA not matching %@\n%@",rsaKeyPair,encodedData);


	NSData		*encodedData2			= [@"1edfe92faf25d38ce4653305c054da329a5a52cb5ea62335cbba208c8ab85f5bb3df59f5a47750dbd7b25e547254619bad581d217d7a83cf138a1ead65d6d93b2b69542fb13719279e423afe3aa7bf4ade2aa2edbde92b2c8a586bb8ec77b4c5832d599b9bddadd50d36182bce7b354a453cc17a60d0604d5fe2d759d14ace2e4bed085bb39cb7e04ee1915a9f51556bfde5ee31aca3537423747ab36274a2ebc477855d2fb1ac43f085f4737fb108a81ccdf72e635db76dc8a185cbd32979c7fc9769e6e7c519fd0e78ddd099eb1d0858a823e020043079c9da486bfd897a295c45c46d617dd6f7c191985a1a572f1c253193b40ea51c3e56cd4396820a9141" hexstringData];
	NSData		*decodedData2			= [encodedData2 decryptWithPrivateKey:[rsaKeyPair objectAtIndex:0]];

	if(![quickbrownTXTData isEqualToData:decodedData2]) 		XCTFail(@"Decoded RSA not matching %@",decodedData2);
}
	

@end
